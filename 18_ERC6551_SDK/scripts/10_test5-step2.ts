import { ethers, network } from "hardhat";
import { TokenboundClient, erc6551AccountAbi } from "@tokenbound/sdk";
import { encodeFunctionData, getAddress, parseUnits } from "viem";
import { DemoNFT, DemoNFT__factory } from "../typechain-types";
import { BigNumber } from "ethers";
const addresses = require("./testcase-addresses.json");

// No need to run '09_test-initial-setup' for this example
// With this test case we want to verify token 0 which holds TBA 1 can be transfered to 
// TBA 2 and now TBA2 is owner of both Token 0 and TBA1
// TBA 2 can use TBA 1 and send transaction to TBA1
// Example: Exectued by Wallet 2
// Testcase 6, Step 2
async function main() {

  const [owner, addr1] = await ethers.getSigners();
  console.log("Network = ",network.name);
  console.log("Owner/Signer: ",owner.address);

  const DemoNFT:DemoNFT__factory = await ethers.getContractFactory("DemoNFT");
  const demoNFT:DemoNFT = await DemoNFT.attach(addresses[network.name].demoNFT);
  console.log("DemoNFT address:", await demoNFT.address);

  const tokenboundClient = new TokenboundClient({ signer:owner, chainId: 80001 });  

  const tokenId1 = "0"; // Need to replace this token id with one generated by 10_test5-step1
  const tokenId2 = "1"; // Need to replace this token id with one generated by 10_test5-step1
  const account1 = tokenboundClient.getAccount({
    tokenContract: addresses[network.name].demoNFT,
    tokenId:tokenId1
  })
  const account2 = tokenboundClient.getAccount({
    tokenContract: addresses[network.name].demoNFT,
    tokenId:tokenId2
  })

  console.log(`TBA1: ${account1}`);
  console.log(`TBA2: ${account2}`);
  console.log(`Owner of token ${tokenId1} is ${await demoNFT.ownerOf(BigNumber.from(tokenId1))}`);
  console.log(`Owner of token ${tokenId2} is ${await demoNFT.ownerOf(BigNumber.from(tokenId2))}`);


  const encodedMintFunctionData = encodeFunctionData({
    abi: DemoNFT__factory.abi,
    functionName:"mint",
    args:[account1]
  });

  const encodedExecuteFunctionData = encodeFunctionData({
    abi: erc6551AccountAbi,
    functionName:"executeCall",
    args:[getAddress(demoNFT.address),0n,encodedMintFunctionData],
  });

  const executedCall = await tokenboundClient.executeCall({
    account: account2,
    to: account1,
    value: 0n,
    data: encodedExecuteFunctionData,
  })

  console.log("executedCall = ",executedCall);
  
  /*
  const tokenIdToTransfer = tokenIdForTBA1;
  const txt3 = await demoNFT.transferFrom(owner.address, account2 ,tokenIdToTransfer);
  const receipt3 = await txt1.wait();

  console.log("Transfer Done");
*/
  /*
  // This will not work because we want to transfer token which holds TBA
  const tokenIdGeneratedInLastStep = "15"; 
  const transferNFT = await tokenboundClient.transferNFT({
    account: addresses[network.name].tbaWallet1,
    tokenType: "ERC721",
    tokenContract: addresses[network.name].demoNFT,
    tokenId: tokenIdGeneratedInLastStep.toString(),
    recipientAddress: getAddress(addresses[network.name].tbaWallet2),
  })

  console.log("transferNFT = ",transferNFT);
  */
}

// We recommend this pattern to be able to use async/await everywhere
// and properly handle errors.
main().catch((error) => {
  console.error(error);
  process.exitCode = 1;
});
